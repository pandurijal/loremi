{"version":3,"sources":["components/Filter.jsx","components/TextBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Filter","props","react_default","a","createElement","onSubmit","className","onClick","onDec","type","name","min","placeholder","value","state","paras","onChange","changeParas","onInc","lorem","changeLorem","defaultChecked","TextBox","copied","toast","lib","text","this","content","map","c","key","Math","random","react_toastify_lib","toastClassName","position","autoClose","hideProgressBar","Component","App","fetchData","_callee","e","api_call","res","regenerator_default","wrap","_context","prev","next","fetch","concat","_this","sent","json","setState","stop","target","handleInc","handleDec","handleSubmit","_callee2","_context2","preventDefault","components_Filter","components_TextBox","prevProps","prevState","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b3ff0b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = props => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.onSubmit}>\r\n        <p className=\"sub-title\">Number of Paraghraps</p>\r\n        <div className=\"paras\">\r\n          <button onClick={props.onDec} className=\"min\">\r\n            -\r\n          </button>\r\n          <input\r\n            type=\"number\"\r\n            name=\"paras\"\r\n            min=\"1\"\r\n            placeholder=\"1\"\r\n            value={props.state.paras}\r\n            onChange={props.changeParas}\r\n          />\r\n          <button onClick={props.onInc} className=\"plus\">\r\n            +\r\n          </button>\r\n        </div>\r\n        <p className=\"sub-title\">Start with lorem ipsum?</p>\r\n        <div className=\"lorem\">\r\n          <label className=\"switch\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"lorem\"\r\n              value={props.state.lorem}\r\n              onChange={props.changeLorem}\r\n              defaultChecked=\"true\"\r\n            />\r\n            <div className=\"slider\" />\r\n          </label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nclass TextBox extends Component {\r\n  copied = () => toast(\"Copied!\");\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"text-box\">\r\n          <CopyToClipboard text={this.props.content}>\r\n            <button className=\"copy-to\" onClick={this.copied}>\r\n              Copy to clipboard\r\n            </button>\r\n          </CopyToClipboard>\r\n          {this.props.content.map(c => (\r\n            <p key={Math.random()}>{c}</p>\r\n          ))}\r\n        </div>\r\n        <ToastContainer\r\n          toastClassName=\"copied\"\r\n          position=\"bottom-center\"\r\n          autoClose={1000}\r\n          hideProgressBar\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextBox;\r\n","import React, { Component } from \"react\";\nimport Filter from \"./components/Filter\";\nimport TextBox from \"./components/TextBox\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    paras: 1,\n    lorem: true,\n    content: []\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Loremi Apps</h1>\n        <Filter\n          onSubmit={this.handleSubmit}\n          state={this.state}\n          changeParas={this.changeParas}\n          changeLorem={this.changeLorem}\n          onDec={this.handleDec}\n          onInc={this.handleInc}\n        />\n        <TextBox content={this.state.content} />\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevState.paras !== this.state.paras ||\n      prevState.lorem !== this.state.lorem\n    ) {\n      this.fetchData();\n    }\n    console.log(this.state);\n  }\n\n  fetchData = async e => {\n    const api_call = await fetch(\n      `https://cors-anywhere.herokuapp.com/http://baseballipsum.apphb.com/api/?paras=${\n        this.state.paras\n      }&startwithlorem=${this.state.lorem}`\n    );\n    const res = await api_call.json();\n    this.setState({ content: res });\n  };\n\n  changeParas = e => {\n    let paras = e.target.value;\n    this.setState({ paras });\n  };\n\n  changeLorem = e => {\n    let lorem = !this.state.lorem;\n    this.setState({ lorem });\n  };\n\n  handleInc = () => {\n    let paras = this.state.paras;\n    this.setState({ paras: paras + 1 });\n  };\n\n  handleDec = () => {\n    let paras = this.state.paras;\n    this.setState({ paras: paras - 1 });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    // const paras = e.target.paras.value;\n    // const startWith = e.target.startWith.checked;\n\n    //console.log(this.state.content[0]);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}